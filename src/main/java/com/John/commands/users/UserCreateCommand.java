package com.John.commands.users;

import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.StringUtils;

import com.John.commands.ResultCommandInterface;
import com.John.controllers.exceptions.UnprocessableEntityException;
import com.John.models.api.User;
import com.John.models.entities.UserEntity;
import com.John.models.repositories.UserRepository;
import com.John.models.repositories.interfaces.UserRepositoryInterface;

public class UserCreateCommand implements ResultCommandInterface<User> {
	@Override
	public User execute() {
		//Validations
		if (StringUtils.isBlank(this.apiUser.getFirstName())) {
			throw new UnprocessableEntityException("first name");
		}
		if (StringUtils.isBlank(this.apiUser.getLastName())) {
			throw new UnprocessableEntityException("last name");
		}
		if (StringUtils.isBlank(this.apiUser.getPassword())) {
			throw new UnprocessableEntityException("password");
		}
		
		//Generate a numeric user ID of length EMPLOYEE_ID_LENGTH for the new user,
		// making sure that the user ID is not already assigned to another user.
		// This field is distinct from the record ID.
		String newUserId;
		do {
			newUserId = RandomStringUtils.randomNumeric(EMPLOYEE_ID_LENGTH);
		} while (this.userRepository.userIdExists(newUserId));

		this.apiUser.setUserId(newUserId);

		UserEntity userEntity = new UserEntity(this.apiUser); //Create a new ENTITY object from the API object details.
		userEntity.save(); //Write, via an INSERT, the new record to the database.
		
		this.apiUser.setId(userEntity.getId()); //Synchronize information generated by the database upon INSERT.
		this.apiUser.setCreatedOn(userEntity.getCreatedOn());
		this.apiUser.setPassword(StringUtils.EMPTY); //Only send the password over the network when modifying the database.
		
		return this.apiUser;
	}
	
	//Properties
	private User apiUser;
	public User getApiUser() {
		return this.apiUser;
	}
	public UserCreateCommand setApiUser(User apiUser) {
		this.apiUser = apiUser;
		return this;
	}
	
	private UserRepositoryInterface userRepository;
	public UserRepositoryInterface getUserRepository() {
		return this.userRepository;
	}
	public UserCreateCommand setUserRepository(UserRepositoryInterface userRepository) {
		this.userRepository = userRepository;
		return this;
	}
	
	private static final int EMPLOYEE_ID_LENGTH = 4;
	
	public UserCreateCommand() {
		this.userRepository = new UserRepository();
	}
}
