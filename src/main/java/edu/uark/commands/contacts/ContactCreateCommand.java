package edu.uark.commands.contacts;

import org.apache.commons.lang3.StringUtils;

import edu.uark.commands.ResultCommandInterface;
import edu.uark.controllers.exceptions.ConflictException;
import edu.uark.controllers.exceptions.UnprocessableEntityException;
import edu.uark.models.api.Contact;
import edu.uark.models.entities.ContactEntity;
import edu.uark.models.repositories.ContactRepository;
import edu.uark.models.repositories.interfaces.ContactRepositoryInterface;

public class ContactCreateCommand implements ResultCommandInterface<Contact> {
	@Override
	public Contact execute() {
		//Validations
		if (StringUtils.isBlank(this.apiContact.getPhoneNumber())) {
			throw new UnprocessableEntityException("lookupCode");
		}

		ContactEntity contactEntity = this.contactRepository.byPhoneNumber(this.apiContact.getPhoneNumber());
		if (contactEntity != null) {
			throw new ConflictException("phonenumber"); //Lookupcode already defined for another product.
		}
		
		//No ENTITY object was returned from the database, thus the API object's lookupcode must be unique.
		contactEntity = new ContactEntity(apiContact); //Create a new ENTITY object from the API object details.
		contactEntity.save(); //Write, via an INSERT, the new record to the database.
		
		this.apiContact.setId(contactEntity.getId()); //Synchronize information generated by the database upon INSERT.

		return this.apiContact;
	}

	//Properties
	private Contact apiContact;
	public Contact getApiContact() {
		return this.apiContact;
	}
	public ContactCreateCommand setApiContact(Contact apiContact) {
		this.apiContact = apiContact;
		return this;
	}
	
	private ContactRepositoryInterface contactRepository;
	public ContactRepositoryInterface getContactRepository() {
		return this.contactRepository;
	}
	public ContactCreateCommand setContactRepository(ContactRepositoryInterface contactRepository) {
		this.contactRepository = contactRepository;
		return this;
	}
	
	public ContactCreateCommand() {
		this.contactRepository = new ContactRepository();
	}
}
